name: Create Docker Image for Slackbot

on:
  workflow_dispatch:
    inputs:
      quay_registry_username:
        description: 'Username'
        required: true
      quay_registry_password:
        description: 'Password'
        required: true
      tag_major_version:
        description: 'Major Version'
        required: true
        default: 1
      tag_minor_version:
        description: 'Minor Version'
        required: true
        default: 1

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: "quay.io/ocp_sustaining_engineering/slack_backend"
      TAG_PATCH_VERSION: 0
      SLACKBOT_IMAGE_REPO_URL: "https://quay.io/api/v1/repository/ocp_sustaining_engineering/slack_backend/tag/"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get Next Tag Version
      # set up the next tag name for the Docker Image

      # e.g. if there are 24 previous images starting with the tag name "1.1."
      # the next tag name will be 1.1.25
      run: |
        PAGE=1
        LIMIT=50
        HAS_MORE=true
        # Initialize an empty JSON array
        ALL_TAGS='[]'
        
        FILTER_PARAMS="&onlyActiveTags=1&filter_tag_name=like:${{ inputs.tag_major_version }}.${{ inputs.tag_minor_version }}."
        
        while [ "$HAS_MORE" = true ]; do
          echo "Fetching page $PAGE..."
          PAGE_AND_LIMIT_PARAMS="?limit=$LIMIT&page=$PAGE"
          JSON_RESPONSE=$(curl -s "$SLACKBOT_IMAGE_REPO_URL$PAGE_AND_LIMIT_PARAMS$FILTER_PARAMS")
        
          # Extract just the tags and append to ALL_TAGS
          TAGS=$(echo "$JSON_RESPONSE" | jq '.tags')
          ALL_TAGS=$(jq -s 'add' <(echo "$ALL_TAGS") <(echo "$TAGS"))
        
          HAS_MORE=$(echo "$JSON_RESPONSE" | jq '.has_additional')
          PAGE=$((PAGE + 1))
        done
        
        # Now ALL_TAGS contains all the tags from all pages
        COUNT_EXISTING=$(echo "$ALL_TAGS" | jq '. | length')
        
        if [ "$COUNT_EXISTING" -eq 0 ]; then
            echo "There are no docker images with version numbers that start with ${{ inputs.tag_major_version }}.${{ inputs.tag_minor_version }}."
            NEXT_TAG_VERSION="${{ inputs.tag_major_version }}.${{ inputs.tag_minor_version }}.${{ env.TAG_PATCH_VERSION }}"
        else
            echo "There are $COUNT_EXISTING docker images with version numbers that start with ${{ inputs.tag_major_version }}.${{ inputs.tag_minor_version }}"
            MAX_VER=$(echo "$ALL_TAGS" | jq -r '.[].name'| sort -V | tail -n1)
            IFS='.' read -r MAJOR MINOR PATCH <<< "$MAX_VER"
            NEW_PATCH=$((PATCH + 1))
            NEXT_TAG_VERSION="${{ inputs.tag_major_version }}.${{ inputs.tag_minor_version }}.${NEW_PATCH}"
        fi        
        echo "NEXT_TAG_VERSION=$NEXT_TAG_VERSION" >> $GITHUB_ENV
        echo "Computed image version: $NEXT_TAG_VERSION"

    - name: Build the Docker image
      run: |
        IMAGE_PLUS_TAG_NAME=$IMAGE_NAME:${{ env.NEXT_TAG_VERSION }}
        echo "IMAGE_PLUS_TAG_NAME=$IMAGE_PLUS_TAG_NAME" >> $GITHUB_ENV
        echo "Building $IMAGE_PLUS_TAG_NAME .."
        docker build -t $IMAGE_PLUS_TAG_NAME .

    - name: Mask Values and Login
      shell: bash
      run: |
        QUAY_PASSWORD=$(jq -r '.inputs.quay_registry_password' $GITHUB_EVENT_PATH)
        echo ::add-mask::$QUAY_PASSWORD
        QUAY_USERNAME=$(jq -r '.inputs.quay_registry_username' $GITHUB_EVENT_PATH)
        echo ::add-mask::QUAY_USERNAME
        echo "$QUAY_PASSWORD" | docker login quay.io -u $QUAY_USERNAME --password-stdin 2>/dev/null

    - name: Push Docker image
      run: |
        echo "Pushing ${{ env.IMAGE_PLUS_TAG_NAME }} .."
        docker push ${{ env.IMAGE_PLUS_TAG_NAME }} 
        echo "Pushed ${{ env.IMAGE_PLUS_TAG_NAME }}"

    - name: Logout
      run: |
        docker logout quay.io