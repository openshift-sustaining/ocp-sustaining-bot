name: Create Docker Image for Slackbot

on:
  workflow_dispatch:
    inputs:
      quay_registry_username:
        description: 'Username'
        required: true
      quay_registry_password:
        description: 'Password'
        required: true
      tag_major_version:
        description: 'Major Version'
        required: true
        default: "1"
      tag_minor_version:
        description: 'Minor Version'
        required: true
        default: "1"

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: "quay.io/ocp_sustaining_engineering/slack_backend"
      TAG_PATCH_VERSION: 0
      SLACKBOT_IMAGE_REPO_URL: "https://quay.io/api/v1/repository/ocp_sustaining_engineering/slack_backend/tag/"

    steps:
    - name: Validate inputs
      run: |
        if ! [[ "${{ inputs.tag_major_version }}" =~ ^[0-9]+$ ]]; then
          echo "Major version must be numeric"
          exit 1
        fi
        if ! [[ "${{ inputs.tag_minor_version }}" =~ ^[0-9]+$ ]]; then
          echo "Minor version must be numeric" 
          exit 1
        fi

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get Next Tag Version
      # set up the next tag name for the Docker Image

      # e.g. if there are 24 previous images starting with the tag name "1.1."
      # the next tag name will be 1.1.25
      run: |
        PAGE=1
        LIMIT=50
        HAS_MORE=true
        # Initialize an empty JSON array
        ALL_TAGS='[]'
        
        FILTER_PARAMS="&onlyActiveTags=1&filter_tag_name=like:${{ inputs.tag_major_version }}.${{ inputs.tag_minor_version }}."
        
        while [ "$HAS_MORE" = true ]; do
          echo "Fetching page $PAGE..."
          PAGE_AND_LIMIT_PARAMS="?limit=$LIMIT&page=$PAGE"
          if ! JSON_RESPONSE=$(curl -s -f --max-time 300 "$SLACKBOT_IMAGE_REPO_URL$PAGE_AND_LIMIT_PARAMS$FILTER_PARAMS"); then
            echo "Failed to fetch tags from API"
            exit 1
          fi
        
          # Extract just the tags and append to ALL_TAGS
          TAGS=$(echo "$JSON_RESPONSE" | jq '.tags')
          ALL_TAGS=$(jq -s 'add' <(echo "$ALL_TAGS") <(echo "$TAGS"))
        
          HAS_MORE=$(echo "$JSON_RESPONSE" | jq '.has_additional')
          PAGE=$((PAGE + 1))
        done
        
        # Now ALL_TAGS contains all the tags from all pages
        COUNT_EXISTING=$(echo "$ALL_TAGS" | jq '. | length')
        
        if [ "$COUNT_EXISTING" -eq 0 ]; then
            echo "There are no docker images with version numbers that start with ${{ inputs.tag_major_version }}.${{ inputs.tag_minor_version }}."
            NEXT_TAG_VERSION="${{ inputs.tag_major_version }}.${{ inputs.tag_minor_version }}.${{ env.TAG_PATCH_VERSION }}"
        else
            echo "There are $COUNT_EXISTING docker images with version numbers that start with ${{ inputs.tag_major_version }}.${{ inputs.tag_minor_version }}"
            MAX_VER=$(echo "$ALL_TAGS" | jq -r '.[].name'| sort -V | tail -n1)
            IFS='.' read -r MAJOR MINOR PATCH <<< "$MAX_VER"
            NEW_PATCH=$((PATCH + 1))
            NEXT_TAG_VERSION="${{ inputs.tag_major_version }}.${{ inputs.tag_minor_version }}.${NEW_PATCH}"
        fi        
        echo "NEXT_TAG_VERSION=$NEXT_TAG_VERSION" >> $GITHUB_ENV
        echo "Computed image version: $NEXT_TAG_VERSION"

    - name: Mask Values and Login
      shell: bash
      run: |
        QUAY_PASSWORD=$(jq -r '.inputs.quay_registry_password' $GITHUB_EVENT_PATH)
        echo ::add-mask::$QUAY_PASSWORD
        QUAY_USERNAME=$(jq -r '.inputs.quay_registry_username' $GITHUB_EVENT_PATH)
        echo ::add-mask::$QUAY_USERNAME
        echo "$QUAY_PASSWORD" | docker login quay.io -u $QUAY_USERNAME --password-stdin 2>/dev/null

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.IMAGE_NAME }}:${{ env.NEXT_TAG_VERSION }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      id: trivy-scan
      continue-on-error: true
      with:
        image-ref: ${{ env.IMAGE_NAME }}:${{ env.NEXT_TAG_VERSION }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'

    - name: Delete Docker image if Trivy scan failed
      if: steps.trivy-scan.outcome == 'failure'
      run: |
        echo "Trivy scan failed. Deleting the Docker image..."
        QUAY_USERNAME=$(jq -r '.inputs.quay_registry_username' $GITHUB_EVENT_PATH)
        QUAY_PASSWORD=$(jq -r '.inputs.quay_registry_password' $GITHUB_EVENT_PATH)
        
        # Delete the tag from Quay.io
        DELETE_URL="https://quay.io/api/v1/repository/ocp_sustaining_engineering/slack_backend/tag/${{ env.NEXT_TAG_VERSION }}"
        
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
          -X DELETE \
          -u "$QUAY_USERNAME:$QUAY_PASSWORD" \
          "$DELETE_URL")
        
        if [ "$HTTP_STATUS" -eq 204 ]; then
          echo "Successfully deleted Docker image tag: ${{ env.NEXT_TAG_VERSION }}"
        else
          echo "Failed to delete Docker image. HTTP status: $HTTP_STATUS"
          echo "This may be expected if the image was already deleted or doesn't exist."
        fi

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Fail workflow if Trivy scan failed
      if: steps.trivy-scan.outcome == 'failure'
      run: |
        echo "Trivy security scan failed with critical or high severity vulnerabilities."
        echo "The Docker image has been deleted from the registry."
        exit 1

    - name: Logout
      run: |
        docker logout quay.io