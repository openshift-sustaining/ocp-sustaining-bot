# 27th June 17:07
name: Docker Image CI V2

on:
  workflow_dispatch:
    inputs:
      QUAY_REGISTRY_USERNAME:
        description: 'Quay Username for docker login'
        required: true
        type: string
      QUAY_REGISTRY_PASSWORD:
        description: 'Quay PW for docker login'
        type: string
        required: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      MAJOR_VERSION: 1
      MINOR_VERSION: 1
      DEFAULT_PATCH_VERSION: 0

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get Patch Version
      run: |
        JSON_RESPONSE=$(curl -s "https://quay.io/api/v1/repository/ocp_sustaining_engineering/slack_backend/tag/")
        COUNT_EXISTING=$(echo "$JSON_RESPONSE" | jq '.tags| map(select(.expiration | not)) | map(.name) | map(select(startswith("${{ env.MAJOR_VERSION }}.${{ env.MINOR_VERSION }}"))) | length')
        if [ "$COUNT_EXISTING" -eq 0 ]; then
            echo "There are no docker images with version numbers that start with ${{ env.MAJOR_VERSION }}.${{ env.MINOR_VERSION }}."
            IMAGE_VERSION="${{ env.MAJOR_VERSION }}.${{ env.MINOR_VERSION }}.${{ env.DEFAULT_PATCH_VERSION }}"
        else
            echo "There are $COUNT_EXISTING docker images with version numbers that start with ${{ env.MAJOR_VERSION }}.${{ env.MINOR_VERSION }}"
            IMAGE_VERSION=$(echo "$JSON_RESPONSE" |jq -r '.tags | map(select(.expiration | not)) | map(.name)| map(select(startswith("${{ env.MAJOR_VERSION }}.${{ env.MINOR_VERSION }}.") and test("^${{ env.MAJOR_VERSION }}\\.${{ env.MINOR_VERSION }}\\.\\d+$"))) | map(split(".") | .[2] | tonumber) | max + 1 | "${{ env.MAJOR_VERSION }}.${{ env.MINOR_VERSION }}.\(.)"')
        fi        
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
        echo "Computed image version: $IMAGE_VERSION"

    - name: Log in to Docker registry
      run: echo "${{ inputs.QUAY_REGISTRY_PASSWORD }}" | docker login quay.io -u "${{ inputs.QUAY_REGISTRY_USERNAME }}" --password-stdin

    - name: Build the Docker image
      run: |
        IMAGE_NAME=quay.io/ocp_sustaining_engineering/slack_backend:${{ env.IMAGE_VERSION }}
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
        echo "Building $IMAGE_NAME .."
        docker build -t $IMAGE_NAME .

    - name: Push Docker image
      run: |
        echo "Pushing ${{ env.IMAGE_NAME }} .."
        docker push ${{ env.IMAGE_NAME }} 
        echo "Pushed ${{ env.IMAGE_NAME }}"