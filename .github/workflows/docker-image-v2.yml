# 27th June 13.56
name: Docker Image CI V2

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'

jobs:

  build-and-push:

    runs-on: ubuntu-latest

    env:
      MAJOR_VERSION: 1
      MINOR_VERSION: 1
      DEFAULT_PATCH_VERSION: 0

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get Patch Version
      run: |
        IMAGE_VERSION=$(curl -s "https://quay.io/api/v1/repository/ocp_sustaining_engineering/slack_backend/tag/" |
        jq -r '.tags | map(select(.expiration | not)) | map(.name)| map(select(startswith("${{ env.MAJOR_VERSION }}.${{ env.MINOR_VERSION }}.") and test("^${{ env.MAJOR_VERSION }}\\.${{ env.MINOR_VERSION }}\\.\\d+$"))) | map(split(".") | .[2] | tonumber) | max + 1 | "${{ env.MAJOR_VERSION }}.${{ env.MINOR_VERSION }}.\(.)"')
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
        echo "Computed image version: $IMAGE_VERSION"
      continue-on-error: |
        IMAGE_VERSION="${{ env.MAJOR_VERSION }}.${{ env.MINOR_VERSION }}.${{ env.DEFAULT_PATCH_VERSION }}"
        echo "Could not determine the patch version using existing image information - defaults will be used"
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
        echo "Default image version: $IMAGE_VERSION"


#    - name: Generate the version number from the major version, minor version and patch version
#      id: version
#      run: |
#        IMAGE_VERSION="${{ env.MAJOR_VERSION }}.${{ env.MINOR_VERSION }}.${{ env.PATCH_VERSION }}"
#        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
#        echo "Computed image version: $IMAGE_VERSION"

    - name: Log in to Docker registry
      run: echo "${{ secrets.QUAY_REGISTRY_PASSWORD }}" | docker login quay.io -u "${{ secrets.QUAY_REGISTRY_USERNAME }}" --password-stdin

    - name: Build the Docker image
      run: |
        IMAGE_NAME=quay.io/ocp_sustaining_engineering/slack_backend:${{ env.IMAGE_VERSION }}
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
        echo "Building $IMAGE_NAME .."
        docker build -t $IMAGE_NAME .

    - name: Push Docker image
      run: |
        echo "Pushing ${{ env.IMAGE_NAME }} .."
        docker push ${{ env.IMAGE_NAME }} 
        echo "Pushed ${{ env.IMAGE_NAME }}"
